/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,4],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,16],$Vc=[2,5,7,10,13,14,15,16,17,19,20,21,24,25,34,36,40],$Vd=[1,36],$Ve=[1,24],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,28],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,32],$Vn=[1,33],$Vo=[1,34],$Vp=[1,39],$Vq=[1,42],$Vr=[1,43],$Vs=[1,44],$Vt=[1,45],$Vu=[1,46],$Vv=[1,47],$Vw=[1,48],$Vx=[1,60],$Vy=[1,55],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,61],$VE=[1,62],$VF=[1,63],$VG=[1,64],$VH=[1,65],$VI=[1,66],$VJ=[2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,41,47,48,49,50,51,52,53,54,55,56,57],$VK=[2,43],$VL=[2,44],$VM=[2,45],$VN=[2,46],$VO=[2,47],$VP=[2,48],$VQ=[2,49],$VR=[13,41,47,48,49,50,51,52,53,54,55,56,57],$VS=[2,54],$VT=[2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,41,47,48,49,50,51,52,53],$VU=[2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,41,47,48,49,50,51,52,53,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"DECLARE":7,"asignacion":8,"declaracion":9,"SELECT":10,"ARROBA":11,"tipo":12,"PUNTOYCOMA":13,"PRINT":14,"BEGIN":15,"END":16,"IF":17,"THEN":18,"ELSE":19,"WHILE":20,"CREATE":21,"TABLE":22,"PARENABRE":23,"PARENCIE":24,"VARI":25,"INT":26,"COMA":27,"DOUBLE":28,"DATE":29,"VARCHAR":30,"TRUE":31,"FALSE":32,"NULL":33,"ALTER":34,"ADD":35,"DROP":36,"COLUMN":37,"RENAME":38,"TO":39,"SET":40,"IGUAL":41,"DEFAULT":42,"REALES":43,"DATEN":44,"CADENA":45,"CADPR":46,"MAS":47,"POR":48,"MENOS":49,"DIVI":50,"MODULO":51,"DIFERENTE":52,"MENOR":53,"MAYOR":54,"AND":55,"OR":56,"NOT":57,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"DECLARE",8:"asignacion",10:"SELECT",11:"ARROBA",13:"PUNTOYCOMA",14:"PRINT",15:"BEGIN",16:"END",17:"IF",18:"THEN",19:"ELSE",20:"WHILE",21:"CREATE",22:"TABLE",23:"PARENABRE",24:"PARENCIE",25:"VARI",26:"INT",27:"COMA",28:"DOUBLE",29:"DATE",30:"VARCHAR",31:"TRUE",32:"FALSE",33:"NULL",34:"ALTER",35:"ADD",36:"DROP",37:"COLUMN",38:"RENAME",39:"TO",40:"SET",41:"IGUAL",42:"DEFAULT",43:"REALES",44:"DATEN",45:"CADENA",46:"CADPR",47:"MAS",48:"POR",49:"MENOS",50:"DIVI",51:"MODULO",52:"DIFERENTE",53:"MENOR",54:"MAYOR",55:"AND",56:"OR",57:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,4],[6,3],[6,3],[6,4],[6,9],[6,7],[6,6],[6,7],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,6],[6,7],[6,7],[6,9],[6,4],[6,1],[9,6],[9,5],[9,7],[9,7],[9,7],[9,7],[9,7],[9,7],[9,7],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,4],[12,3],[12,4],[12,3],[12,3],[12,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
this.$ = []; this.$.push($$[$0])
break;
case 4:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = $$[$0]; 
break;
case 6: case 7: case 8:
 this.$ = new Mostrar($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 9:
 this.$ = new Encapsula($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 10:
 this.$ = new IfElse($$[$0-7],$$[$0-5],$$[$0-3],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 11:
 this.$ = new If($$[$0-5],$$[$0-3],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 12:
 this.$ = new While($$[$0-4],$$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 13:
this.$ = new AsigTabla($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 14:
this.$ = new ColumnaE($$[$0-2],"int",_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 15:
this.$ = new ColumnaE($$[$0-2],"double",_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 16:
this.$ = new ColumnaE($$[$0-2],"date",_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 17:
this.$ = new ColumnaE($$[$0-2],"string",_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 18:
this.$ = new ColumnaE($$[$0-2],"true",_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 19:
this.$ = new ColumnaE($$[$0-2],"false",_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 20:
this.$ = new ColumnaE($$[$0-2],"null",_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 21:
this.$ = new ColumnaE($$[$0-1],"int",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 22:
this.$ = new ColumnaE($$[$0-1],"double",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 23:
this.$ = new ColumnaE($$[$0-1],"date",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 24:
this.$ = new ColumnaE($$[$0-1],"string",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 25:
this.$ = new ColumnaE($$[$0-1],"true",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 26:
this.$ = new ColumnaE($$[$0-1],"false",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 27:
this.$ = new ColumnaE($$[$0-1],"null",_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 28:
this.$ = new AgregarCo($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 29:
this.$ = new EliminarCo($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 30:
this.$ = new CambiarN($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 31:
this.$ = new CambiarNC($$[$0-6],$$[$0-3],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 32:
this.$ = new EliminarT($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 33:

                console.log('Error sintáctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
                let s = Informacion.getInstance();
                s.add_Error(new Errores("Sintáctico","No se esperaba en caracter "+ yytext,this._$.first_line,this._$.first_column));
                //ListaError.push(err);
                
break;
case 34:
this.$ = new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 35:
this.$ = new Asignar($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 36: case 37: case 38: case 39: case 40: case 41: case 42:
this.$ = new Asignar($$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 43: case 50:
this.$ = new Dato($$[$0], 'int',_$[$0].first_line,_$[$0].first_column);
break;
case 44:
this.$ = new Dato($$[$0], 'double',_$[$0].first_line,_$[$0].first_column);
break;
case 45: case 51:
this.$ = new Dato($$[$0], 'date',_$[$0].first_line,_$[$0].first_column);
break;
case 46: case 52: case 53:
this.$ = new Dato($$[$0], 'varchar',_$[$0].first_line,_$[$0].first_column);
break;
case 47:
this.$ = new Dato($$[$0], 'true',_$[$0].first_line,_$[$0].first_column);
break;
case 48:
this.$ = new Dato($$[$0], 'false',_$[$0].first_line,_$[$0].first_column);
break;
case 49:
this.$ = new Dato($$[$0], 'null',_$[$0].first_line,_$[$0].first_column);
break;
case 54: case 55:
this.$ = new Id($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 56:
this.$ = new Aritmetica($$[$0-2], '+', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 57:
this.$ = new Aritmetica($$[$0-2], '*', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 58:
this.$ = new Aritmetica($$[$0-2], '-', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 59:
this.$ = new Aritmetica($$[$0-2], '/', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 60:
this.$ = new Aritmetica($$[$0-2], '%', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 61:
this.$ = new Relacional($$[$0-2], '=', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 62:
this.$ = new Relacional($$[$0-2], '!=', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 63:
this.$ = new Relacional($$[$0-2], '<', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 64:
this.$ = new Relacional($$[$0-3], '<=', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 65:
this.$ = new Relacional($$[$0-2], '>', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 66:
this.$ = new Relacional($$[$0-3], '>=', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 67:
this.$ = new Logico($$[$0-2], 'and', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 68:
this.$ = new Logico($$[$0-2], 'or', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 69:
this.$ = new Logico($$[$0-2], 'not', $$[$0],_$[$0].first_line,_$[$0].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{1:[3]},{2:$V0,5:[1,17],6:18,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},o($Vc,[2,3]),{8:[1,19],11:[1,20]},o($Vc,[2,5]),{11:[1,21]},{2:$V0,4:23,6:3,7:$V1,9:5,10:$V2,11:$Vd,12:22,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:[1,35],26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$V9,36:$Va,40:$Vb,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{2:$V0,4:37,6:3,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{11:$Vd,12:38,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:40,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{22:[1,41]},{26:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw},{22:[1,49]},{22:[1,50]},o($Vc,[2,33]),{11:[1,51]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,4]),{25:[1,52]},{11:$Vd,12:53,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{13:[1,54],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{2:$V0,6:18,7:$V1,9:5,10:$V2,13:[1,67],14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},o($VJ,$VK),o($VJ,$VL),o($VJ,$VM),o($VJ,$VN),o($VJ,$VO),o($VJ,$VP),o($VJ,$VQ),o($VJ,[2,50]),o($VJ,[2,51]),o($VJ,[2,52]),o($VJ,[2,53]),o($VR,$VS,{26:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw}),{25:[1,68]},{2:$V0,6:18,7:$V1,9:5,10:$V2,14:$V3,15:$V4,16:[1,69],17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{18:[1,70],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},o($VJ,$VS),{2:$V0,4:71,6:3,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb,41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{11:$Vd,12:72,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($Vc,[2,21],{27:[1,73]}),o($Vc,[2,22],{27:[1,74]}),o($Vc,[2,23],{27:[1,75]}),o($Vc,[2,24],{27:[1,76]}),o($Vc,[2,25],{27:[1,77]}),o($Vc,[2,26],{27:[1,78]}),o($Vc,[2,27],{27:[1,79]}),{25:[1,80]},{25:[1,81]},{25:[1,82]},{11:$Vd,12:83,25:$Vp,26:[1,84],28:[1,86],29:[1,85],30:[1,87],31:[1,88],32:[1,89],33:[1,90],43:$Vl,44:$Vm,45:$Vn,46:$Vo},{13:[1,91],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},o($Vc,[2,7]),{11:$Vd,12:92,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:93,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:94,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:95,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:96,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:97,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:98,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:99,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,41:[1,100],43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:101,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,41:[1,102],43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:103,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:104,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:105,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($Vc,[2,8]),o($VJ,[2,55]),{13:[1,106]},{2:$V0,4:107,6:3,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{2:$V0,6:18,7:$V1,9:5,10:$V2,14:$V3,15:$V4,16:[1,108],17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{23:[1,109],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},o($Vc,[2,14]),o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Vc,[2,20]),{35:[1,110],36:[1,111],38:[1,112]},{13:[1,113]},{41:[1,114]},{13:[1,115],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},o($VR,$VK,{42:[1,116]}),o($VR,$VM,{42:[1,117]}),o($VR,$VL,{42:[1,118]}),o($VR,$VN,{42:[1,119]}),o($VR,$VO,{42:[1,120]}),o($VR,$VP,{42:[1,121]}),o($VR,$VQ,{42:[1,122]}),o($Vc,[2,6]),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,47],[2,56],{41:$Vx,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,47,48],[2,57],{41:$Vx,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,47,48,49],[2,58],{41:$Vx,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,47,48,49,50],[2,59],{41:$Vx,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,47,48,49,50,51],[2,60],{41:$Vx,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,41,47,48,49,50,51],[2,61],{52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,41,47,48,49,50,51,52],[2,62],{53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($VT,[2,63],{54:$VF,55:$VG,56:$VH,57:$VI}),{11:$Vd,12:123,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($VU,[2,65],{55:$VG,56:$VH,57:$VI}),{11:$Vd,12:124,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,41,47,48,49,50,51,52,53,54,55],[2,67],{56:$VH,57:$VI}),o([2,7,10,13,14,15,17,18,20,21,23,25,34,36,40,41,47,48,49,50,51,52,53,54,55,56],[2,68],{57:$VI}),o($VJ,[2,69]),o($Vc,[2,9]),{2:$V0,6:18,7:$V1,9:5,10:$V2,14:$V3,15:$V4,16:[1,126],17:$V5,19:[1,125],20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{20:[1,127]},{2:$V0,4:128,6:3,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{2:$V0,4:129,6:3,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{37:[1,130]},{37:[1,132],39:[1,131]},o($Vc,[2,32]),{11:$Vd,12:133,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($Vc,[2,35]),{11:$Vd,12:134,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:135,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:136,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:137,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:138,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:139,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{11:$Vd,12:140,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},o($VT,[2,64],{54:$VF,55:$VG,56:$VH,57:$VI}),o($VU,[2,66],{55:$VG,56:$VH,57:$VI}),{2:$V0,4:141,6:3,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{17:[1,142]},{13:[1,143]},{2:$V0,6:18,7:$V1,9:5,10:$V2,14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,24:[1,144],25:$V8,34:$V9,36:$Va,40:$Vb},{2:$V0,6:18,7:$V1,9:5,10:$V2,13:[1,145],14:$V3,15:$V4,17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{25:[1,146]},{11:$Vd,12:147,25:$Vp,26:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,43:$Vl,44:$Vm,45:$Vn,46:$Vo},{25:[1,148]},{13:[1,149],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{13:[1,150],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{13:[1,151],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{13:[1,152],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{13:[1,153],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{13:[1,154],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{13:[1,155],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{13:[1,156],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{2:$V0,6:18,7:$V1,9:5,10:$V2,14:$V3,15:$V4,16:[1,157],17:$V5,20:$V6,21:$V7,25:$V8,34:$V9,36:$Va,40:$Vb},{13:[1,158]},o($Vc,[2,12]),{13:[1,159]},o($Vc,[2,28]),{13:[1,160]},{13:[1,161],41:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},{39:[1,162]},o($Vc,[2,34]),o($Vc,[2,36]),o($Vc,[2,37]),o($Vc,[2,38]),o($Vc,[2,39]),o($Vc,[2,40]),o($Vc,[2,41]),o($Vc,[2,42]),{17:[1,163]},o($Vc,[2,11]),o($Vc,[2,13]),o($Vc,[2,29]),o($Vc,[2,30]),{25:[1,164]},{13:[1,165]},{13:[1,166]},o($Vc,[2,10]),o($Vc,[2,31])],
defaultActions: {17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Dato = require("../interprete/expresiones/Dato.js");
    const ColumnaE = require("../interprete/expresiones/ColumnaE.js");
    const Mostrar = require('../interprete/instrucciones/Mostrar.js');
    const Aritmetica = require('../interprete/expresiones/Aritmetica.js');
    const Logico = require('../interprete/expresiones/Logico.js');
    const Relacional = require('../interprete/expresiones/Relacional.js');
    const AsigTabla  = require('../interprete/instrucciones/AsigTabla');
    const AgregarCo  = require('../interprete/instrucciones/AgregarCo');
    const EliminarCo  = require('../interprete/instrucciones/EliminarCo');
    const CambiarN  = require('../interprete/instrucciones/CambiarN');
    const CambiarNC  = require('../interprete/instrucciones/CambiarNC');
    const EliminarT  = require('../interprete/instrucciones/EliminarT');
    const Asignar  = require('../interprete/instrucciones/Asignar');
    const Id = require('../interprete/expresiones/Id');
    const Errores = require('../interprete/instrucciones/Errores.js');
    const Token = require('../interprete/instrucciones/Token.js');
    const Informacion = require('../interprete/instrucciones/Informacion.js');
    const Encapsula  = require('../interprete/instrucciones/Encapsula.js');
    const IfElse  = require('../interprete/instrucciones/IfElse.js');
    const If  = require('../interprete/instrucciones/If.js');
    const While  = require('../interprete/instrucciones/While.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:let sa = Informacion.getInstance();
                        sa.add_Token(new Token(yy_.yytext,"Punto", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'PUNTO'
break;
case 1:let sb = Informacion.getInstance();
                        sb.add_Token(new Token(yy_.yytext,"Arroba", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 11
break;
case 2:let sf = Informacion.getInstance();
                        sf.add_Token(new Token(yy_.yytext,"Parentesis abre", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 23
break;
case 3:let sg = Informacion.getInstance();
                        sg.add_Token(new Token(yy_.yytext,"Parentesis cierra", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 24
break;
case 4:let se = Informacion.getInstance();
                        se.add_Token(new Token(yy_.yytext,"Punto y coma", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 13
break;
case 5:let sh = Informacion.getInstance();
                        sh.add_Token(new Token(yy_.yytext,"Coma", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 27
break;
case 6:let si = Informacion.getInstance();
                        si.add_Token(new Token(yy_.yytext,"Mas", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 47
break;
case 7:let sj = Informacion.getInstance();
                        sj.add_Token(new Token(yy_.yytext,"Menos", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 49
break;
case 8:let sk = Informacion.getInstance();
                        sk.add_Token(new Token(yy_.yytext,"Por", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 48
break;
case 9:let sl = Informacion.getInstance();
                        sl.add_Token(new Token(yy_.yytext,"Division", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 50
break;
case 10:let sm = Informacion.getInstance();
                        sm.add_Token(new Token(yy_.yytext,"Modulo", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 51
break;
case 11:let sn = Informacion.getInstance();
                        sn.add_Token(new Token(yy_.yytext,"Igual", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 41
break;
case 12:let so = Informacion.getInstance();
                        so.add_Token(new Token(yy_.yytext,"Diferente", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 52
break;
case 13:let sp = Informacion.getInstance();
                        sp.add_Token(new Token(yy_.yytext,"Menor", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 53
break;
case 14:let sq = Informacion.getInstance();
                        sq.add_Token(new Token(yy_.yytext,"Mayor", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 54
break;
case 15:let sr = Informacion.getInstance();
                        sr.add_Token(new Token(yy_.yytext,"Int", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 26
break;
case 16:let ss = Informacion.getInstance();
                        ss.add_Token(new Token(yy_.yytext,"Double", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 28
break;
case 17:let st = Informacion.getInstance();
                        st.add_Token(new Token(yy_.yytext,"Date", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 29
break;
case 18:let sd = Informacion.getInstance();
                        sd.add_Token(new Token(yy_.yytext,"Varchar", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 30
break;
case 19:let su = Informacion.getInstance();
                        su.add_Token(new Token(yy_.yytext,"True", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 31
break;
case 20:let sv = Informacion.getInstance();
                        sv.add_Token(new Token(yy_.yytext,"False", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 32
break;
case 21:let sw = Informacion.getInstance();
                        sw.add_Token(new Token(yy_.yytext,"Null", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 33
break;
case 22:let sx = Informacion.getInstance();
                        sx.add_Token(new Token(yy_.yytext,"And", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 55
break;
case 23:let sy = Informacion.getInstance();
                        sy.add_Token(new Token(yy_.yytext,"Or", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 56
break;
case 24:let sz = Informacion.getInstance();
                        sz.add_Token(new Token(yy_.yytext,"Not", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 57
break;
case 25:let a = Informacion.getInstance();
                        a.add_Token(new Token(yy_.yytext,"Begin", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 15
break;
case 26:let ab = Informacion.getInstance();
                        ab.add_Token(new Token(yy_.yytext,"End", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 16
break;
case 27:let ac = Informacion.getInstance();
                        ac.add_Token(new Token(yy_.yytext,"Declare", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 7
break;
case 28:let ad = Informacion.getInstance();
                        ad.add_Token(new Token(yy_.yytext,"Default", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 42
break;
case 29:let ae = Informacion.getInstance();
                        ae.add_Token(new Token(yy_.yytext,"Set", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 40
break;
case 30:let af = Informacion.getInstance();
                        af.add_Token(new Token(yy_.yytext,"Create", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 21
break;
case 31:let ag = Informacion.getInstance();
                        ag.add_Token(new Token(yy_.yytext,"Table", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 22
break;
case 32:let ah = Informacion.getInstance();
                        ah.add_Token(new Token(yy_.yytext,"Alter", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 34
break;
case 33:let ai = Informacion.getInstance();
                        ai.add_Token(new Token(yy_.yytext,"Add", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 35
break;
case 34:let aj = Informacion.getInstance();
                        aj.add_Token(new Token(yy_.yytext,"Drop", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 36
break;
case 35:let ak = Informacion.getInstance();
                        ak.add_Token(new Token(yy_.yytext,"Column", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 37
break;
case 36:let al = Informacion.getInstance();
                        al.add_Token(new Token(yy_.yytext,"Rename", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 38
break;
case 37:let am = Informacion.getInstance();
                        am.add_Token(new Token(yy_.yytext,"To", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 39
break;
case 38:let an = Informacion.getInstance();
                        an.add_Token(new Token(yy_.yytext,"Insert", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'INSERT'
break;
case 39:let ao = Informacion.getInstance();
                        ao.add_Token(new Token(yy_.yytext,"Into", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'INTO'
break;
case 40:let ap = Informacion.getInstance();
                        ap.add_Token(new Token(yy_.yytext,"Values", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'VALUES'
break;
case 41:let aq = Informacion.getInstance();
                        aq.add_Token(new Token(yy_.yytext,"Select", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 10
break;
case 42:let ar = Informacion.getInstance();
                        ar.add_Token(new Token(yy_.yytext,"From", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'FROM'
break;
case 43:let as = Informacion.getInstance();
                        as.add_Token(new Token(yy_.yytext,"Where", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'WHERE'
break;
case 44:let at = Informacion.getInstance();
                        at.add_Token(new Token(yy_.yytext,"Update", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'UPDATE'
break;
case 45:let au = Informacion.getInstance();
                        au.add_Token(new Token(yy_.yytext,"Truncate", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'TRUNCATE'
break;
case 46:let av = Informacion.getInstance();
                        av.add_Token(new Token(yy_.yytext,"Delete", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'DELETE'
break;
case 47:let aw = Informacion.getInstance();
                        aw.add_Token(new Token(yy_.yytext,"Cast", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'CAST'
break;
case 48:let ax = Informacion.getInstance();
                        ax.add_Token(new Token(yy_.yytext,"If", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 17
break;
case 49:let ay = Informacion.getInstance();
                        ay.add_Token(new Token(yy_.yytext,"Then", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 18
break;
case 50:let az = Informacion.getInstance();
                        az.add_Token(new Token(yy_.yytext,"Else", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 19
break;
case 51:let b = Informacion.getInstance();
                        b.add_Token(new Token(yy_.yytext,"When", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'WHEN'
break;
case 52:let ba = Informacion.getInstance();
                        ba.add_Token(new Token(yy_.yytext,"Case", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'CASE'
break;
case 53:let bb = Informacion.getInstance();
                        bb.add_Token(new Token(yy_.yytext,"While", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 20
break;
case 54:let bc = Informacion.getInstance();
                        bc.add_Token(new Token(yy_.yytext,"For", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'FOR'
break;
case 55:let bd = Informacion.getInstance();
                        bd.add_Token(new Token(yy_.yytext,"In", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'IN'
break;
case 56:let be = Informacion.getInstance();
                        be.add_Token(new Token(yy_.yytext,"Break", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'BREAK'
break;
case 57:let bf = Informacion.getInstance();
                        bf.add_Token(new Token(yy_.yytext,"Continue", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'CONTINUE'
break;
case 58:let bg = Informacion.getInstance();
                        bg.add_Token(new Token(yy_.yytext,"Print", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 14
break;
case 59:let bh = Informacion.getInstance();
                        bh.add_Token(new Token(yy_.yytext,"Funcion", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'FUNCION'
break;
case 60:let bi = Informacion.getInstance();
                        bi.add_Token(new Token(yy_.yytext,"Returns", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'RETURNS'
break;
case 61:let bj = Informacion.getInstance();
                        bj.add_Token(new Token(yy_.yytext,"Procedure", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'PROCEDURE'
break;
case 62:let bk = Informacion.getInstance();
                        bk.add_Token(new Token(yy_.yytext,"As", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'AS'
break;
case 63:let bl = Informacion.getInstance();
                        bl.add_Token(new Token(yy_.yytext,"Lower", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'LOWER'
break;
case 64:let bm = Informacion.getInstance();
                        bm.add_Token(new Token(yy_.yytext,"Upper", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'UPPER'
break;
case 65:let bn = Informacion.getInstance();
                        bn.add_Token(new Token(yy_.yytext,"Round", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'ROUND'
break;
case 66:let bo = Informacion.getInstance();
                        bo.add_Token(new Token(yy_.yytext,"Len", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'LEN'
break;
case 67:let bq = Informacion.getInstance();
                        bq.add_Token(new Token(yy_.yytext,"Typeof", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'TYPEOF'
break;
case 68:let br = Informacion.getInstance();
                        br.add_Token(new Token(yy_.yytext,"Fecha", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 44;
break;
case 69:let bs = Informacion.getInstance();
                        bs.add_Token(new Token(yy_.yytext,"Numero Real", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 43; 
break;
case 70:let bt = Informacion.getInstance();
                        bt.add_Token(new Token(yy_.yytext,"Numero Entero", yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 'ENTERO'; 
break;
case 71: let bu = Informacion.getInstance();
                        bu.add_Token(new Token(yy_.yytext,"Columna", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 'COLUM'; 
break;
case 72: let sc = Informacion.getInstance();
                        sc.add_Token(new Token(yy_.yytext,"Nombre Variable", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 25; 
break;
case 73:let bv = Informacion.getInstance();
                        bv.add_Token(new Token(yy_.yytext,"Variable", yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 'VARIABLE'; 
break;
case 74: let bw = Informacion.getInstance();
                        bw.add_Token(new Token(yy_.yytext,"Cadena", yy_.yylloc.first_line, yy_.yylloc.first_column));
                        return 45; 
break;
case 75:let bx = Informacion.getInstance();
                        bx.add_Token(new Token(yy_.yytext,"Cadena", yy_.yylloc.first_line, yy_.yylloc.first_column));
                         return 46; 
break;
case 76:
break;
case 77:
break;
case 78:/* Comentarios se ignoran */
break;
case 79:/* Espacios se ignoran */
break;
case 80:/* Espacios se ignoran */
break;
case 81:return 5;
break;
case 82: 
    console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column); 
    let s = Informacion.getInstance();
    s.add_Error(new Errores("Léxico"," El carácter "+yy_.yytext+" no pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
    
break;
}
},
rules: [/^(?:\.)/i,/^(?:@)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:print\b)/i,/^(?:funcion\b)/i,/^(?:returns\b)/i,/^(?:procedure\b)/i,/^(?:as\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:\d{4}([\-/.])(0?[1-9]|1[1-2])\1(3[01]|[12][0-9]|0?[1-9]))/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:([0-9]+))/i,/^(?:columna\d+)/i,/^(?:[a-zA-z][a-zA-z0-9_]*)/i,/^(?:[a-zA-z][a-zA-z0-9_]*)/i,/^(?:"(\\.|[^\"\\])*")/i,/^(?:'(\\.|[^\"\\])*')/i,/^(?:--.*)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:[ \s\r\n\t])/i,/^(?:[ \\])/i,/^(?:[ \“\’\"\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}