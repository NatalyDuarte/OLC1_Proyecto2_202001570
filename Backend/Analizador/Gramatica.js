/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,4],$V2=[1,11],$V3=[1,5],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,15],$V9=[2,5,7,8,10,11,14,15,19,20,21,24,35],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[1,31],$Vk=[1,32],$Vl=[1,34],$Vm=[1,33],$Vn=[1,35],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,47],$Vt=[1,48],$Vu=[1,49],$Vv=[2,5,7,8,10,11,14,15,19,20,21,24,26,35],$Vw=[1,51],$Vx=[1,55],$Vy=[1,62],$Vz=[1,58],$VA=[1,57],$VB=[1,59],$VC=[1,60],$VD=[1,61],$VE=[1,63],$VF=[1,64],$VG=[1,65],$VH=[1,66],$VI=[1,67],$VJ=[2,5,7,8,10,11,12,14,15,16,19,20,21,24,26,35,41,42,43,44,45,46,47,48,49],$VK=[2,5,7,8,10,11,14,15,16,19,20,21,24,26,35,41,42],$VL=[2,5,7,8,10,11,14,15,19,20,21,24,26,35,41],$VM=[2,5,7,8,10,11,12,14,15,16,19,20,21,24,26,35,41,42,43,44,45,46],$VN=[2,5,7,8,10,11,12,14,15,16,19,20,21,24,26,35,41,42,43,44,45,46,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones":4,"EOF":5,"instruccion":6,"DECLARE":7,"VARI":8,"tipo":9,"PUNTOYCOMA":10,"SET":11,"IGUAL":12,"multiple":13,"PRINT":14,"SELECT":15,"POR":16,"FROM":17,"WHERE":18,"BEGIN":19,"END":20,"CREATE":21,"TABLE":22,"PARENABRE":23,"PARENCIE":24,"INT":25,"COMA":26,"DOUBLE":27,"DATE":28,"VARCHAR":29,"TRUE":30,"FALSE":31,"NULL":32,"decVar":33,"var":34,"VARIABLE":35,"DEFAULT":36,"REALES":37,"DATEN":38,"CADENA":39,"CADPR":40,"MAS":41,"MENOS":42,"DIVI":43,"MODULO":44,"DIFERENTE":45,"MENOR":46,"MAYOR":47,"AND":48,"OR":49,"NOT":50,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"DECLARE",8:"VARI",10:"PUNTOYCOMA",11:"SET",12:"IGUAL",14:"PRINT",15:"SELECT",16:"POR",17:"FROM",18:"WHERE",19:"BEGIN",20:"END",21:"CREATE",22:"TABLE",23:"PARENABRE",24:"PARENCIE",25:"INT",26:"COMA",27:"DOUBLE",28:"DATE",29:"VARCHAR",30:"TRUE",31:"FALSE",32:"NULL",35:"VARIABLE",36:"DEFAULT",37:"REALES",38:"DATEN",39:"CADENA",40:"CADPR",41:"MAS",42:"MENOS",43:"DIVI",44:"MODULO",45:"DIFERENTE",46:"MENOR",47:"MAYOR",48:"AND",49:"OR",50:"NOT"},
productions_: [0,[3,2],[4,2],[4,1],[6,4],[6,5],[6,3],[6,1],[6,3],[6,3],[6,7],[6,4],[6,7],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[13,3],[13,1],[33,3],[33,2],[34,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,1],[9,1],[9,1],[9,1],[9,2],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,3],[9,3],[9,3],[9,4],[9,3],[9,4],[9,3],[9,3],[9,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
this.$ = []; this.$.push($$[$0])
break;
case 4:
this.$ = new Declara($$[$0-2], $$[$0-1]);
break;
case 5:
this.$ = new Declara($$[$0-3], $$[$0-1]);
break;
case 7: case 29:
 this.$ = $$[$0]; 
break;
case 8: case 9:
this.$ = new Print($$[$0-1]);
break;
case 10:
this.$ = new Select($$[$0-3],$$[$0-1]);
break;
case 11:
this.$ = new Encapsula($$[$0-2]);
break;
case 12:
this.$ = new Tabla($$[$0-4],$$[$0-2]);
break;
case 13:
this.$ = new Columna($$[$0-2],"int")
break;
case 14:
this.$ = new Columna($$[$0-2],"double")
break;
case 15:
this.$ = new Columna($$[$0-2],"date")
break;
case 16:
this.$ = new Columna($$[$0-2],"string")
break;
case 17:
this.$ = new Columna($$[$0-2],"true")
break;
case 18:
this.$ = new Columna($$[$0-2],"false")
break;
case 19:
this.$ = new Columna($$[$0-2],"null")
break;
case 20:
this.$ = new Columna($$[$0-1],"int")
break;
case 21:
this.$ = new Columna($$[$0-1],"double")
break;
case 22:
this.$ = new Columna($$[$0-1],"date")
break;
case 23:
this.$ = new Columna($$[$0-1],"string")
break;
case 24:
this.$ = new Columna($$[$0-1],"true")
break;
case 25:
this.$ = new Columna($$[$0-1],"false")
break;
case 26:
this.$ = new Columna($$[$0-1],"null")
break;
case 27:

                console.log('Error sintáctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);
                let s = Informacion.getInstance();
                s.add_Error(new Errores("Sintáctico","No se esperaba en caracter "+ yytext,this._$.first_line,this._$.first_column));
                //ListaError.push(err);
                
break;
case 28:
 this.$ = $$[$0-2]; 
break;
case 30: case 31:
this.$ = new Declara($$[$0-1], $$[$0]);
break;
case 32:
this.$ = new Variable($$[$0]);
break;
case 33:
this.$ = new  Dato('INT',null);
break;
case 34:
this.$ = new  Dato('DOUBLE',null);
break;
case 35:
this.$ = new  Dato('DATE',null);
break;
case 36:
this.$ = new  Dato('VARCHAR',null);
break;
case 37:
this.$ = new  Dato('TRUE',null);
break;
case 38:
this.$ = new  Dato('FALSE',null);
break;
case 39:
this.$ = new  Dato('NULL',null);
break;
case 40: case 47:
this.$ = new Dato('INT',$$[$0]);
break;
case 41: case 48:
this.$ = new Dato('DATE',$$[$0]);
break;
case 42:
this.$ = new Dato('DOUBLE',$$[$0]);
break;
case 43: case 49: case 50:
this.$ = new Dato('VARCHAR',$$[$0]);
break;
case 44:
this.$ = new Dato('TRUE',$$[$0]);
break;
case 45:
this.$ = new Dato('FALSE',$$[$0]);
break;
case 46:
this.$ = new Dato('NULL',$$[$0]);
break;
case 51:
this.$ = new Dato('VARCHAR',$$[$0-1]);
break;
case 52:
this.$ = new Aritmetica($$[$0-2], '+', $$[$0])
break;
case 53:
this.$ = new Aritmetica($$[$0-2], '*', $$[$0])
break;
case 54:
this.$ = new Aritmetica($$[$0-2], '-', $$[$0])
break;
case 55:
this.$ = new Aritmetica($$[$0-2], '/', $$[$0])
break;
case 56:
this.$ = new Aritmetica($$[$0-2], '%', $$[$0])
break;
case 57:
this.$ = new Aritmetica("Menos", 'Nega', $$[$0])
break;
case 58:
this.$ = new Aritmetica("Mas", 'Nega', $$[$0])
break;
case 59:
this.$ = new Relacional($$[$0-2], '=', $$[$0])
break;
case 60:
this.$ = new Relacional($$[$0-2], '!=', $$[$0])
break;
case 61:
this.$ = new Relacional($$[$0-2], '<', $$[$0])
break;
case 62:
this.$ = new Relacional($$[$0-3], '<=', $$[$0-1])
break;
case 63:
this.$ = new Relacional($$[$0-2], '>', $$[$0])
break;
case 64:
this.$ = new Relacional($$[$0-3], '>=', $$[$0-1])
break;
case 65:
this.$ = new Logico($$[$0-2], 'and', $$[$0])
break;
case 66:
this.$ = new Logico($$[$0-2], 'or', $$[$0])
break;
case 67:
this.$ = new Logico(null, 'not', $$[$0])
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,8:$V2,11:$V3,13:6,14:$V4,15:$V5,19:$V6,21:$V7,33:13,34:14,35:$V8},{1:[3]},{2:$V0,5:[1,16],6:17,7:$V1,8:$V2,11:$V3,13:6,14:$V4,15:$V5,19:$V6,21:$V7,33:13,34:14,35:$V8},o($V9,[2,3]),{8:[1,18],34:19,35:$V8},{8:[1,20],9:21,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},o($V9,[2,7],{26:[1,36]}),{2:$V0,4:38,6:3,7:$V1,8:[1,39],9:37,11:$V3,13:6,14:$V4,15:$V5,19:$V6,21:$V7,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,33:13,34:14,35:$V8,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{16:[1,40]},{2:$V0,4:41,6:3,7:$V1,8:$V2,11:$V3,13:6,14:$V4,15:$V5,19:$V6,21:$V7,33:13,34:14,35:$V8},{22:[1,42]},{25:$Vo,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu},o($V9,[2,27]),o($Vv,[2,29]),{8:$Vw,9:50,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},o([8,25,27,28,29,30,31,32,37,38,39,40,41,42,50],[2,32]),{1:[2,1]},o($V9,[2,2]),{8:$Vw,9:52,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:53,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{12:[1,54],26:$Vx},{10:[1,56],12:$Vy,16:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI},o($VJ,[2,33],{36:[1,68]}),o($VJ,[2,34],{36:[1,69]}),o($VJ,[2,35],{36:[1,70]}),o($VJ,[2,36],{36:[1,71]}),o($VJ,[2,37],{36:[1,72]}),o($VJ,[2,38],{36:[1,73]}),o($VJ,[2,39],{36:[1,74]}),o($VJ,[2,47]),o($VJ,[2,48]),o($VJ,[2,49]),o($VJ,[2,50]),{8:$Vw,9:75,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:76,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:77,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{7:[1,79],33:78,34:14,35:$V8},{10:[1,80],12:$Vy,16:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI},{2:$V0,6:17,7:$V1,8:$V2,10:[1,81],11:$V3,13:6,14:$V4,15:$V5,19:$V6,21:$V7,33:13,34:14,35:$V8},{25:$Vo,26:$Vx,27:$Vp,28:$Vq,29:$Vr,30:$Vs,31:$Vt,32:$Vu},{17:[1,82]},{2:$V0,6:17,7:$V1,8:$V2,11:$V3,13:6,14:$V4,15:$V5,19:$V6,20:[1,83],21:$V7,33:13,34:14,35:$V8},{8:[1,84]},o($V9,[2,20],{26:[1,85]}),o($V9,[2,21],{26:[1,86]}),o($V9,[2,22],{26:[1,87]}),o($V9,[2,23],{26:[1,88]}),o($V9,[2,24],{26:[1,89]}),o($V9,[2,25],{26:[1,90]}),o($V9,[2,26],{26:[1,91]}),o($Vv,[2,31],{12:$Vy,16:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),{26:$Vx},{10:[1,92],12:$Vy,16:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI},o($Vv,[2,30],{12:$Vy,16:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),{8:$Vw,9:93,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},o($VJ,[2,51]),o($V9,[2,6]),{8:$Vw,9:94,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:95,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:96,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:97,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:98,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:99,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:100,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:101,12:[1,102],25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:103,12:[1,104],25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:105,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{8:$Vw,9:106,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{37:[1,107]},{37:[1,108]},{38:[1,109]},{39:[1,110]},{30:[1,111]},{31:[1,112]},{32:[1,113]},o($VK,[2,57],{12:$Vy,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o($VL,[2,58],{12:$Vy,16:$Vz,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o($VJ,[2,67]),o($Vv,[2,28]),{34:19,35:$V8},o($V9,[2,8]),o($V9,[2,9]),{8:[1,114]},{10:[1,115]},{23:[1,116]},o($V9,[2,13]),o($V9,[2,14]),o($V9,[2,15]),o($V9,[2,16]),o($V9,[2,17]),o($V9,[2,18]),o($V9,[2,19]),o($V9,[2,4]),{10:[1,117],12:$Vy,16:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI},o($VL,[2,52],{12:$Vy,16:$Vz,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o([2,5,7,8,10,11,14,15,16,19,20,21,24,26,35,41],[2,53],{12:$Vy,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o($VK,[2,54],{12:$Vy,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o([2,5,7,8,10,11,14,15,16,19,20,21,24,26,35,41,42,43],[2,55],{12:$Vy,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o([2,5,7,8,10,11,14,15,16,19,20,21,24,26,35,41,42,43,44],[2,56],{12:$Vy,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o([2,5,7,8,10,11,12,14,15,16,19,20,21,24,26,35,41,42,43,44],[2,59],{45:$VE,46:$VF,47:$VG,48:$VH,49:$VI}),o([2,5,7,8,10,11,12,14,15,16,19,20,21,24,26,35,41,42,43,44,45],[2,60],{46:$VF,47:$VG,48:$VH,49:$VI}),o($VM,[2,61],{47:$VG,48:$VH,49:$VI}),{8:$Vw,9:118,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},o($VN,[2,63],{48:$VH,49:$VI}),{8:$Vw,9:119,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},o([2,5,7,8,10,11,12,14,15,16,19,20,21,24,26,35,41,42,43,44,45,46,47,48],[2,65],{49:$VI}),o($VJ,[2,66]),o($VJ,[2,40]),o($VJ,[2,42]),o($VJ,[2,41]),o($VJ,[2,43]),o($VJ,[2,44]),o($VJ,[2,45]),o($VJ,[2,46]),{18:[1,120]},o($V9,[2,11]),{2:$V0,4:121,6:3,7:$V1,8:$V2,11:$V3,13:6,14:$V4,15:$V5,19:$V6,21:$V7,33:13,34:14,35:$V8},o($V9,[2,5]),o($VM,[2,62],{47:$VG,48:$VH,49:$VI}),o($VN,[2,64],{48:$VH,49:$VI}),{8:$Vw,9:122,25:$Va,27:$Vb,28:$Vc,29:$Vd,30:$Ve,31:$Vf,32:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:$Vm,50:$Vn},{2:$V0,6:17,7:$V1,8:$V2,11:$V3,13:6,14:$V4,15:$V5,19:$V6,21:$V7,24:[1,123],33:13,34:14,35:$V8},{10:[1,124],12:$Vy,16:$Vz,41:$VA,42:$VB,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH,49:$VI},{10:[1,125]},o($V9,[2,10]),o($V9,[2,12])],
defaultActions: {16:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Dato = require('../interprete/expresiones/Dato.js');
    const Variable = require('../interprete/expresiones/Variable.js');
    const Print = require('../interprete/instrucciones/Print.js');
    const Declara = require('../interprete/instrucciones/Declara.js');
    const Aritmetica = require('../interprete/instrucciones/Aritmetica.js');
    const Relacional = require('../interprete/instrucciones/Relacionales.js');
    const Select = require('../interprete/instrucciones/Select.js');
    const Logico = require('../interprete/instrucciones/Logico.js');
    const Encapsula = require('../interprete/instrucciones/Encapsula.js');
    const Columna = require('../interprete/expresiones/Columna.js');
    const Tabla = require('../interprete/instrucciones/Tabla.js');
    const Errores = require('../interprete/instrucciones/Errores.js');
    const ListaError = require('../interprete/instrucciones/ListaError.js');
    const Informacion = require('../interprete/instrucciones/Informacion.js');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'PUNTO'
break;
case 1:return 23
break;
case 2:return 24
break;
case 3:return 10
break;
case 4:return 26
break;
case 5:return 41
break;
case 6:return 42
break;
case 7:return 16
break;
case 8:return 43
break;
case 9:return 44
break;
case 10:return 12
break;
case 11:return 45
break;
case 12:return 46
break;
case 13:return 47
break;
case 14:return 25
break;
case 15:return 27
break;
case 16:return 28
break;
case 17:return 29
break;
case 18:return 30
break;
case 19:return 31
break;
case 20:return 32
break;
case 21:return 48
break;
case 22:return 49
break;
case 23:return 50
break;
case 24:return 19
break;
case 25:return 20
break;
case 26:return 7
break;
case 27:return 36
break;
case 28:return 11
break;
case 29:return 21
break;
case 30:return 22
break;
case 31:return 'ALTER'
break;
case 32:return 'ADD'
break;
case 33:return 'DROP'
break;
case 34:return 'COLUMN'
break;
case 35:return 'RENAME'
break;
case 36:return 'TO'
break;
case 37:return 'INSERT'
break;
case 38:return 'INTO'
break;
case 39:return 'VALUES'
break;
case 40:return 15
break;
case 41:return 17
break;
case 42:return 18
break;
case 43:return 'UPDATE'
break;
case 44:return 'TRUNCATE'
break;
case 45:return 'DELETE'
break;
case 46:return 'CAST'
break;
case 47:return 'IF'
break;
case 48:return 'THEN'
break;
case 49:return 'ELSE'
break;
case 50:return 'WHEN'
break;
case 51:return 'CASE'
break;
case 52:return 'WHILE'
break;
case 53:return 'FOR'
break;
case 54:return 'IN'
break;
case 55:return 'BREAK'
break;
case 56:return 'CONTINUE'
break;
case 57:return 14
break;
case 58:return 'FUNCION'
break;
case 59:return 'RETURNS'
break;
case 60:return 'PROCEDURE'
break;
case 61:return 'AS'
break;
case 62:return 'LOWER'
break;
case 63:return 'UPPER'
break;
case 64:return 'ROUND'
break;
case 65:return 'LEN'
break;
case 66:return 'TYPEOF'
break;
case 67:return 38;
break;
case 68: return 37; 
break;
case 69: return 'ENTERO'; 
break;
case 70: return 'COLUM'; 
break;
case 71: return 8; 
break;
case 72: return 35; 
break;
case 73: return 39; 
break;
case 74: return 40; 
break;
case 75:
break;
case 76:
break;
case 77:/* Comentarios se ignoran */
break;
case 78:/* Espacios se ignoran */
break;
case 79:/* Espacios se ignoran */
break;
case 80:return 5;
break;
case 81: 
    console.error('Error léxico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column); 
    let s = Informacion.getInstance();
    s.add_Error(new Errores("Léxico"," El carácter "+yy_.yytext+" no pertenece al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
    
break;
}
},
rules: [/^(?:\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:null\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:column\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:select\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:when\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:print\b)/i,/^(?:funcion\b)/i,/^(?:returns\b)/i,/^(?:procedure\b)/i,/^(?:as\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:len\b)/i,/^(?:typeof\b)/i,/^(?:\d{4}([\-/.])(0?[1-9]|1[1-2])\1(3[01]|[12][0-9]|0?[1-9]))/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:([0-9]+))/i,/^(?:columna\d+)/i,/^(?:[a-zA-z][a-zA-z0-9_]*)/i,/^(?:[a-zA-z][a-zA-z0-9_]*)/i,/^(?:"(\\.|[^\"\\])*")/i,/^(?:'(\\.|[^\"\\])*')/i,/^(?:--.*)/i,/^(?:\/\*[\s\S]*?\*\/)/i,/^(?:[ \s\r\n\t])/i,/^(?:[ \\])/i,/^(?:[ \“\’\"\'])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}